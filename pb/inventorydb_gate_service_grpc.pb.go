// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: inventorydb_gate_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InventoryDBGateService_GetInventory_FullMethodName    = "/pb.InventoryDBGateService/GetInventory"
	InventoryDBGateService_CreateInventory_FullMethodName = "/pb.InventoryDBGateService/CreateInventory"
)

// InventoryDBGateServiceClient is the client API for InventoryDBGateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryDBGateServiceClient interface {
	GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
	CreateInventory(ctx context.Context, in *CreateInventoryRequest, opts ...grpc.CallOption) (*CreateInventoryResponse, error)
}

type inventoryDBGateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryDBGateServiceClient(cc grpc.ClientConnInterface) InventoryDBGateServiceClient {
	return &inventoryDBGateServiceClient{cc}
}

func (c *inventoryDBGateServiceClient) GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	out := new(GetInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryDBGateService_GetInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryDBGateServiceClient) CreateInventory(ctx context.Context, in *CreateInventoryRequest, opts ...grpc.CallOption) (*CreateInventoryResponse, error) {
	out := new(CreateInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryDBGateService_CreateInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryDBGateServiceServer is the server API for InventoryDBGateService service.
// All implementations must embed UnimplementedInventoryDBGateServiceServer
// for forward compatibility
type InventoryDBGateServiceServer interface {
	GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error)
	CreateInventory(context.Context, *CreateInventoryRequest) (*CreateInventoryResponse, error)
	mustEmbedUnimplementedInventoryDBGateServiceServer()
}

// UnimplementedInventoryDBGateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryDBGateServiceServer struct {
}

func (UnimplementedInventoryDBGateServiceServer) GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedInventoryDBGateServiceServer) CreateInventory(context.Context, *CreateInventoryRequest) (*CreateInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventory not implemented")
}
func (UnimplementedInventoryDBGateServiceServer) mustEmbedUnimplementedInventoryDBGateServiceServer() {
}

// UnsafeInventoryDBGateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryDBGateServiceServer will
// result in compilation errors.
type UnsafeInventoryDBGateServiceServer interface {
	mustEmbedUnimplementedInventoryDBGateServiceServer()
}

func RegisterInventoryDBGateServiceServer(s grpc.ServiceRegistrar, srv InventoryDBGateServiceServer) {
	s.RegisterService(&InventoryDBGateService_ServiceDesc, srv)
}

func _InventoryDBGateService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryDBGateServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryDBGateService_GetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryDBGateServiceServer).GetInventory(ctx, req.(*GetInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryDBGateService_CreateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryDBGateServiceServer).CreateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryDBGateService_CreateInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryDBGateServiceServer).CreateInventory(ctx, req.(*CreateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryDBGateService_ServiceDesc is the grpc.ServiceDesc for InventoryDBGateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryDBGateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.InventoryDBGateService",
	HandlerType: (*InventoryDBGateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInventory",
			Handler:    _InventoryDBGateService_GetInventory_Handler,
		},
		{
			MethodName: "CreateInventory",
			Handler:    _InventoryDBGateService_CreateInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventorydb_gate_service.proto",
}
